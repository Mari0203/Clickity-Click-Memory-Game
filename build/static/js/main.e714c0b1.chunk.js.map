{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","index.js"],"names":["FriendCard","props","className","alt","name","src","image","occupation","location","onClick","removeFriend","id","Wrapper","children","Title","App","state","friends","currentScore","highScore","resetClicked","newArray","map","friend","clicked","setState","console","log","newShuffledArray","sort","Math","random","this","key","Component","ReactDOM","render","document","getElementById"],"mappings":"guFA6BeA,MA1Bf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,SAEnC,yBAAKJ,UAAU,WACb,4BACE,4BACE,yCADF,IAC0BD,EAAMG,MAEhC,4BACE,+CADF,IACgCH,EAAMM,YAEtC,4BACE,6CADF,IAC8BN,EAAMO,YAIxC,0BAAMC,QAAS,kBAAMR,EAAMS,aAAaT,EAAMU,KAAKT,UAAU,UAA7D,kB,MCbSU,MANf,SAAiBX,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMY,W,MCG1BC,MAJf,SAAeb,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAMY,W,OC8FvBE,E,2MA1FbC,MAAQ,CACNC,UACAC,aAAc,EACdC,UAAW,G,EAGbC,aAAe,WACb,IAAMC,EAAW,EAAKL,MAAMC,QAAQK,IAAI,SAAAC,GAEtC,OADAA,EAAOC,SAAU,EACVD,IAET,EAAKE,SAAS,CACZR,QAASI,K,EAIbX,aAAe,SAAAC,GACbe,QAAQC,IAAI,OAAQhB,GAEpB,IAAMU,EAAW,EAAKL,MAAMC,QAAQK,IAAI,SAAAC,GAgCtC,OA/BIZ,IAAOY,EAAOZ,KAEZY,EAAOC,SACT,EAAKC,SAAS,CACZP,aAAc,IAEhB,EAAKE,gBAKD,EAAKJ,MAAME,cAAgB,EAAKF,MAAMG,UACxC,EAAKM,SAAS,CAEZP,aAAc,EAAKF,MAAME,aAAe,EACxCC,UAAW,EAAKH,MAAMG,UAAY,IAIpC,EAAKM,SAAS,CACZP,aAAc,EAAKF,MAAME,aAAc,IAMxCK,EAAOC,UACVD,EAAOC,SAAU,IAIdD,IAITG,QAAQC,IAAIV,GAGZ,EAAKQ,SAAS,CAAER,QAASI,IAEzB,IAAMO,EAAmB,EAAKZ,MAAMC,QAAQY,KAAM,kBAAMC,KAAKC,SAAW,KAExE,EAAKN,SAAS,CACZR,QAASW,K,wEAIL,IAAD,OACL,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,qBADF,uBAGuBI,KAAKhB,MAAME,aAHlC,qBAGkEc,KAAKhB,MAAMG,UAE1Ea,KAAKhB,MAAMC,QAAQK,IAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CACEb,aAAc,EAAKA,aACnBC,GAAIY,EAAOZ,GACXsB,IAAKV,EAAOZ,GACZP,KAAMmB,EAAOnB,KACbE,MAAOiB,EAAOjB,MACdC,WAAYgB,EAAOhB,WACnBC,SAAUe,EAAOf,kB,GApFX0B,a,MCDlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e714c0b1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name}\n          </li>\n          <li>\n            <strong>Occupation:</strong> {props.occupation}\n          </li>\n          <li>\n            <strong>Location:</strong> {props.location}\n          </li>\n        </ul>\n      </div>\n      <span onClick={() => props.removeFriend(props.id)} className=\"remove\">\n        ùòÖ\n      </span>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\n// props.children refer to Wrapper's children which are Title and FriendCard plus whatever is inside of <Wrapper> tag.\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    currentScore: 0,\n    highScore: 0\n  };\n\n  resetClicked = () => {\n    const newArray = this.state.friends.map(friend => {\n      friend.clicked = false;\n      return friend;\n    });\n    this.setState({\n      friends: newArray\n    });\n  };\n\n  removeFriend = id => {\n    console.log(\"id: \", id);\n\n    const newArray = this.state.friends.map(friend => {\n      if (id === friend.id) {\n        // Executes below ONLY if friend.clicked is TRUE (i.e. it exists!):\n        if (friend.clicked) {\n          this.setState({\n            currentScore: 0\n          });\n          this.resetClicked();\n\n        // Executes below else function if friend.clicked is FALSE (i.e. it DOES NOT exists!)\n        } else {\n\n          if (this.state.currentScore >= this.state.highScore) {\n            this.setState({\n            // Update the scores by an increment of 1\n              currentScore: this.state.currentScore + 1,\n              highScore: this.state.highScore + 1\n            });\n          } \n          else {\n            this.setState({\n              currentScore: this.state.currentScore +1\n            });\n          }\n        };\n\n        // If the clicked-friend(image) doesn't exist...:\n        if (!friend.clicked) {\n          friend.clicked = true;\n        }\n      }\n\n      return friend;\n\n    });\n\n    console.log(friends);\n\n    // Set this.state.friends equal to the new friends array\n    this.setState({ friends: newArray });\n\n    const newShuffledArray = this.state.friends.sort( () => Math.random() - .5);\n    \n    this.setState({\n      friends: newShuffledArray\n    });\n  }\n  // Map over this.state.friends and render a FriendCard component for each friend object\nrender() {\n    return (\n      <Wrapper>\n        <Title>Friends List</Title>\n\n        Your Current Score: {this.state.currentScore} Your Best Score: {this.state.highScore} \n\n        {this.state.friends.map(friend => (\n          <FriendCard\n            removeFriend={this.removeFriend}\n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            occupation={friend.occupation}\n            location={friend.location}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}